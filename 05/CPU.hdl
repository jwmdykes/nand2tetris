// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in=instruction[15], out=aInstruction);
    And(a=instruction[15], b=true, out=cInstruction);

    // Handle A register
    Mux16(a=aluOut, b=instruction, sel=aInstruction, out=Ain); // test if A instruction
    // load into A if instruction is A instruction or dest has A in it
    Or(a=aInstruction, b=instruction[5], out=loadA);
    ARegister(in=Ain, load=loadA, out=Aout, out[0..14]=addressM); // A register

    // Handle D register
    And(a=cInstruction, b=instruction[4], out=loadD);
    DRegister(in=aluOut, load=loadD, out=aluin1);

    // ALU second input
    Mux16(a=Aout, b=inM, sel=instruction[12], out=aluin2);

    // ALU 
    ALU(x=aluin1, y=aluin2, 
        zx=instruction[11], nx=instruction[10],  // zx = c1, nx = c2
        zy=instruction[9], ny=instruction[8], // zy = c3, ny = c4
        f=instruction[7], no=instruction[6],  // f = c5, no = c6
        out=aluOut, out=outM,                 // store in registers and to OUT of interface
        zr=jeq, ng=jlt);

    And(a=cInstruction, b=instruction[3], out=writeM); // only write M if instruction is c instruction with destination M

    // set jump flags jgt, jeq, jge, jlt, jne, jle
    Not(in=jeq, out=jne);
    Not(in=jlt, out=jge);
    And(a=jne, b=jge, out=jgt);
    Or(a=jeq, b=jlt, out=jle);

    // pick correct jump flag based on `jjj` part of instruction
    Mux8Way(a=false, b=jgt,
        c=jeq, d=jge, 
        e=jlt, f=jne, 
        g=jle, h=true, 
        sel=instruction[0..2], 
        out[0]=jumpFlag);

    And(a=cInstruction, b=jumpFlag, out=shouldJump);
    PC(in=Aout, load=shouldJump, inc=true, reset=reset, out[0..14]=pc); // PC register ; program counter
}