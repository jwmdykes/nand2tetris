// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // memory goes from 0 to 0x6000 (24576 base 10).
    // for 0 to 0x4000-1 (16383 base 10) get the RAM address 
    // from 0x4000 to 0x6000-1, get the screen address
    // above 0x6000 is undefined behaviour

    // to implement this, we do as follows
    // if 15th bit is 0, address the RAM
    // if the 15th is one, but the 14th bit is not one, address the screen 
    // if the 15th and thirteenth bits are one, address the keyboard

    Not(in=address[14], out=getRAM);
    And(a=address[14], b=address[13], out=getKBD);
    Not(in=getRAM, out=notgetRAM);
    And(a=notgetRAM, b=in[13], out=getSCREEN);

    And(a=getSCREEN, b=load, out=loadSCREEN);
    Screen(in=in, load=loadSCREEN, address=address[0..12], out=screenout);
    Keyboard(out=kbdout);
    And(a=getRAM, b=load, out=loadRAM);
    RAM16K(in=in, load=loadRAM, address=address[0..13], out=ramout);

    Mux16(a=screenout, b=ramout, sel=getRAM, out=screenORram);
    Mux16(a=screenORram, b=kbdout, sel=getKBD, out=out);
}